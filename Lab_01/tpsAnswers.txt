TPS 1:
  1. 
    NA
  2.
    a ~ https://www.youtube.com/watch?v=aKRYQsKR46I
    b ~ https://www.youtube.com/watch?v=LGT380m3UOw
    c ~ https://www.youtube.com/watch?v=ZtqBQ68cfJc


TPS 2:
  1.
    a.
      Yes.
    b.
      So that you can run multiple terminal based programs at once.
  2.
    You can use either ls or ls -a if you want to see hiden files aswell.
  3.
    cd ../../../Desktop
  4.
    I cd into the directory I would like and because I want to have git integration I just do a git clone of the ssh repo.


TPS 3:
  1.
    a ~ https://gcc.gnu.org/onlinedocs/gcc.pdf
    b ~ https://phoxis.org/2009/12/01/beginners-guide-to-gcc/
  3.
    gcc main.c
  4.
    If no error's are presented in the terminal and if the a.out file is sucsesfully produced.
  5.
    The -c flag generates object files instead of executables. These are binary files of the source code that have not been linked together to produce an executable.
  6.
    The -g flag and its variants like -g1 , -g2, and -g3. Tell the compiler to compile the source code into an executable with various levels of debug information that a debugger like GDB can acsess to better the debugging process. This is in contrast to the -O flag and variants that optimize the code for hopefully faster performance but throws away debug information.
  7.
    To change the name you would want to do something like: gcc $(CFLAGS) -o cselab1 main.c . So you first call gcc and all the flags you want to use, I like to add extra compile time info with -Wall -Wextra -Wpedantic, then use the -o flag to compile them into an executable and then provide the name of the executable and finally the .c file you want to be compiled.
  8.
    The compiler produces a a.out binary executable.
  9.
    To run the a.out you simply type in the command ./a.out and hit enter.
