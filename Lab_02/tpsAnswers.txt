1:
    1.
        N/A
    2.
        a ~ https://stackoverflow.com/questions/34680789/how-to-install-lldb-on-mac
        b ~ https://www.youtube.com/watch?v=v_C1cvo1biI
        c ~ https://lldb.llvm.org/use/tutorial.html
    3.

2:
    1. Add the -g flag to the gcc compile comand.
    2. Run the comand ``lldb ./punishment``.
    3. In the lldb repl enter the comand ``r``.
    4. A breakpoint is a process that you have told the debugger to stop at so you can continue to do other things. You can enter the command ``b (function name)`` to break on a function or you can enter ``b (file name):(line)`` to break on a specific line of a function.
    5. You can use either ``s`` for steping through the code entering function when they apear or ``n`` going line by line but not entering functions.
    6. By entering the command ``p (variable name)`` I can see the value of that variable at that step. I can also see them displayed at the stoping points of the program.
    7. You can enter the ``c`` or ``f`` depending on whether you want to continue till the next breakpoint or if you want to finish the function entirely. In this context ``f`` works because the breakpoint is set in main.
    8. You can enter ``q``.

3:
    1. There are 4 variables and 2 are pointers.
    2. They will be jibberish (possibly zero as the memory may not be being used) because they are unset memory locations, and in running the program with prints I am confirmed to be correct.
    3. You can do that by initlizing them to some value.
    7. Array names and pointers are infact the same thing.
    8. It makes sense because it is quite close to the memory location of x and y because the kernal will generate memory sequentially from request and is the same as the memory location of ``arr[0]``.

4:
    1. The error on occurs on line 25 ``scanf("%d", input);``.
    2. Add a reference modifier to the ``input`` variable.
    3. A copy of sum is made when being passed to ``read_values()`` function and the original declaration in main is never modified.
    4. Pass in the pointer of sum and modify the dereferenced value.
